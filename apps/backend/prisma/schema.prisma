generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// TODO: Criar relação entre avaliacoes e produtos
model avaliacoes {
  avaliacao_id      Int       @id @default(autoincrement())
  avaliacao_opiniao String    @db.VarChar(255)
  avaliacao_nota    Int
  avaliacao_data    DateTime  @default(now()) @db.DateTime(0)
  usuario_id        Int
  usuarios          usuarios  @relation(fields: [usuario_id], references: [usuario_id], onDelete: Cascade)
  criado_em         DateTime  @default(now()) @db.DateTime(0)
  atualizado_em     DateTime? @default(now()) @db.DateTime(0)
}

model enderecos {
  endereco_id          Int       @id @default(autoincrement())
  endereco_estado      String    @db.VarChar(25)
  endereco_cidade      String    @db.VarChar(50)
  endereco_bairro      String    @db.VarChar(25)
  endereco_rua         String    @db.VarChar(50)
  endereco_numero      String    @db.VarChar(10)
  endereco_complemento String?   @db.VarChar(100)
  endereco_referencia  String?   @db.VarChar(100)
  endereco_cep         String    @db.VarChar(10)
  usuario_id           Int       @unique
  usuario              usuarios  @relation(fields: [usuario_id], references: [usuario_id], onDelete: Cascade)
  criado_em            DateTime  @default(now()) @db.DateTime(0)
  atualizado_em        DateTime? @default(now()) @db.DateTime(0)
}

model produtos {
  produto_id          Int           @id @default(autoincrement())
  produto_nome        String        @db.VarChar(255)
  produto_descricao   String        @db.Text
  produto_preco       Int
  produto_status      Boolean       @default(true)
  produto_estoque     Int
  produto_peso        Int?
  produto_em_promocao Boolean       @default(false)
  produto_destaque    Boolean       @default(false)
  produto_tags        Int?
  marca_id            Int?          @unique
  categoria_id        Int?          @unique
  produto_imagems     imagens[]
  produto_tamanho     tamanhos?
  genero_id           Int?
  colecao_id          Int?
  pedidoItens         pedidoItens[]

  marca     marcas?     @relation(fields: [marca_id], references: [marca_id])
  categoria categorias? @relation(fields: [categoria_id], references: [categoria_id])
  genero    generos?    @relation(fields: [genero_id], references: [genero_id])
  colecao   colecoes?   @relation(fields: [colecao_id], references: [colecao_id])

  criado_em     DateTime        @default(now()) @db.DateTime(0)
  atualizado_em DateTime?       @default(now()) @db.DateTime(0)
  carrinhoItens carrinhoItens[]
  desejoItens   desejoItens[]
}

model desejos {
  desejo_id     Int           @id @default(autoincrement())
  usuario_id    Int           @unique
  usuario       usuarios      @relation(fields: [usuario_id], references: [usuario_id])
  itens         desejoItens[]
  criado_em     DateTime      @default(now()) @db.DateTime(0)
  atualizado_em DateTime?     @default(now()) @db.DateTime(0)
}

model desejoItens {
  item_id    Int @id @default(autoincrement())
  desejo_id  Int
  produto_id Int

  desejo  desejos  @relation(fields: [desejo_id], references: [desejo_id])
  produto produtos @relation(fields: [produto_id], references: [produto_id])

  @@unique([desejo_id, produto_id])
}

model carrinhos {
  carrinho_id Int             @id @default(autoincrement())
  usuario_id  Int             @unique
  usuario     usuarios        @relation(fields: [usuario_id], references: [usuario_id])
  itens       carrinhoItens[]

  criado_em     DateTime  @default(now()) @db.DateTime(0)
  atualizado_em DateTime? @default(now()) @db.DateTime(0)
}

model carrinhoItens {
  item_id     Int @id @default(autoincrement())
  carrinho_id Int
  produto_id  Int
  quantidade  Int

  carrinho carrinhos @relation(fields: [carrinho_id], references: [carrinho_id])
  produto  produtos  @relation(fields: [produto_id], references: [produto_id])

  criado_em     DateTime  @default(now()) @db.DateTime(0)
  atualizado_em DateTime? @default(now()) @db.DateTime(0)

  @@unique([carrinho_id, produto_id])
}

// TODO: Relacionar o campo de pedido_imagem com a model imagens
model pedidos {
  pedido_id        Int      @id @default(autoincrement())
  pedido_data      DateTime @default(now()) @db.DateTime(0)
  pedido_status    String   @default("Em Andamento")
  pedido_descricao String?
  pedido_imagem    String?

  itens pedidoItens[]

  criado_em     DateTime  @default(now()) @db.DateTime(0)
  atualizado_em DateTime? @default(now()) @db.DateTime(0)
}

model pedidoItens {
  item_id        Int @id @default(autoincrement())
  pedido_id      Int
  produto_id     Int
  quantidade     Int
  preco_unitario Int

  pedido  pedidos  @relation(fields: [pedido_id], references: [pedido_id])
  produto produtos @relation(fields: [produto_id], references: [produto_id])

  criado_em     DateTime  @default(now()) @db.DateTime(0)
  atualizado_em DateTime? @default(now()) @db.DateTime(0)

  @@unique([pedido_id, produto_id])
}

model colecoes {
  colecao_id        Int        @id @default(autoincrement())
  colecao_nome      String     @db.VarChar(30)
  colecao_descricao String     @db.VarChar(255)
  produtos          produtos[]

  criado_em     DateTime  @default(now()) @db.DateTime(0)
  atualizado_em DateTime? @default(now()) @db.DateTime(0)
}

model generos {
  genero_id        Int        @id @default(autoincrement())
  genero_nome      String     @db.VarChar(30)
  genero_descricao String     @db.VarChar(255)
  produtos         produtos[]

  criado_em     DateTime  @default(now()) @db.DateTime(0)
  atualizado_em DateTime? @default(now()) @db.DateTime(0)
}

model categorias {
  categoria_id        Int        @id @default(autoincrement())
  categoria_nome      String     @db.VarChar(30)
  categoria_descricao String     @db.VarChar(255)
  produtos            produtos[]

  criado_em     DateTime  @default(now()) @db.DateTime(0)
  atualizado_em DateTime? @default(now()) @db.DateTime(0)
}

model marcas {
  marca_id   Int        @id @default(autoincrement())
  marca_nome String     @db.VarChar(50)
  produtos   produtos[]

  criado_em     DateTime  @default(now()) @db.DateTime(0)
  atualizado_em DateTime? @default(now()) @db.DateTime(0)
}

model tamanhos {
  tamanho_id          Int @id @default(autoincrement())
  tamanho_altura      Int
  tamanho_comprimento Int
  tamanho_largura     Int
  produto_id          Int @unique

  produto produtos @relation(fields: [produto_id], references: [produto_id], onDelete: Cascade)

  criado_em     DateTime  @default(now()) @db.DateTime(0)
  atualizado_em DateTime? @default(now()) @db.DateTime(0)
}

model imagens {
  imagem_id  Int     @id @default(autoincrement())
  imagem_url String? @db.VarChar(500)
  produto_id Int

  produto produtos @relation(fields: [produto_id], references: [produto_id], onDelete: Cascade)

  criado_em     DateTime  @default(now()) @db.DateTime(0)
  atualizado_em DateTime? @default(now()) @db.DateTime(0)
}

// TODO: Deixar CPF Unico para cada usuário
model usuarios {
  usuario_id         Int          @id @default(autoincrement())
  usuario_email      String       @unique(map: "usuario_email") @db.VarChar(200)
  usuario_senha      String?      @db.VarChar(255)
  usuario_nome       String       @db.VarChar(100)
  usuario_cpf        String       @db.VarChar(20)
  usuario_celular    String?      @db.VarChar(20)
  usuario_newsletter Boolean?     @default(false)
  usuario_avaliacoes avaliacoes[]
  usuario_endereco   enderecos?
  carrinhos          carrinhos?
  desejos            desejos?

  criado_em     DateTime  @default(now()) @db.DateTime(0)
  atualizado_em DateTime? @default(now()) @db.DateTime(0)
}
